const pitchHeight=53+1/3,pitchWidth=120,lineWidth=2,numHeight=2,numWidth=4/3,numDistanceYardLine=2/3,hashMarkLength=2,hashMarkMidHeight=6+6/36,pointRadius=10,imageLoader=document.getElementById("imageLoader"),imageCanvas=document.getElementById("imageCanvas"),pointsImageCanvas=document.getElementById("pointsImageCanvas"),templateCanvas=document.getElementById("templateCanvas"),pointsTemplateCanvas=document.getElementById("pointsTemplateCanvas"),removeLastPointButton=document.getElementById("removeLastPoint"),computeHomographyButton=document.getElementById("computeHomography"),ctxImage=imageCanvas.getContext("2d"),ctxPointsImage=pointsImageCanvas.getContext("2d"),ctxTemplate=templateCanvas.getContext("2d"),ctxPointsTemplate=pointsTemplateCanvas.getContext("2d");let scaleFactorWidth,scaleFactorHeight,templateImage,sourceImage,img=new Image,isImageLoaded=!1,pointsImage=[],pointsTemplate=[],lines=[],dragIndex=null;const colors=[{name:"Red",hex:"#FF0000"},{name:"Green",hex:"#00FF00"},{name:"Blue",hex:"#0000FF"},{name:"Yellow",hex:"#FFFF00"},{name:"Cyan",hex:"#00FFFF"},{name:"Magenta",hex:"#FF00FF"},{name:"Black",hex:"#000000"},{name:"White",hex:"#FFFFFF"},{name:"Gray",hex:"#808080"},{name:"Light Gray",hex:"#D3D3D3"}];imageLoader.addEventListener("change",handleImage,!1),removeLastPointButton.addEventListener("click",removeLastPoint),computeHomographyButton.addEventListener("click",computeHomography),scaleFactorWidth=templateCanvas.offsetWidth/pitchWidth,scaleFactorHeight=templateCanvas.offsetHeight/pitchHeight,templateCanvas.width=scaleFactorWidth*pitchWidth+2*lineWidth,templateCanvas.height=scaleFactorHeight*pitchHeight+2*lineWidth,pointsTemplateCanvas.width=templateCanvas.width,pointsTemplateCanvas.height=templateCanvas.height,cv.onRuntimeInitialized=function(){drawTemplate();let a=ctxTemplate.getImageData(0,0,ctxTemplate.canvas.width,ctxTemplate.canvas.height),b=new Uint8Array(a.data.buffer);templateImage=new cv.Mat(ctxTemplate.canvas.height,ctxTemplate.canvas.width,cv.CV_8UC4),templateImage.data.set(b)};function handleImage(a){var b=new FileReader;b.onload=function(a){img.onload=function(){sourceImage=cv.imread(img);var a=document.getElementById("canvasContainer"),b=a.offsetWidth,c=img.width/img.height,d=img.width,e=img.height;d>b&&(d=b,e=d/c),a.style.width=d+"px",a.style.height=e+"px",imageCanvas.width=d,imageCanvas.height=e,pointsImageCanvas.width=d,pointsImageCanvas.height=e,cv.imshow("imageCanvas",sourceImage)},img.src=a.target.result},b.readAsDataURL(a.target.files[0]),pointsImageCanvas.addEventListener("mousedown",a=>handleClick(a,pointsImageCanvas,pointsImage,ctxPointsImage)),pointsTemplateCanvas.addEventListener("mousedown",a=>handleClick(a,pointsTemplateCanvas,pointsTemplate,ctxPointsTemplate)),pointsImageCanvas.addEventListener("mousemove",a=>dragPoint(a,pointsImageCanvas,pointsImage,ctxPointsImage)),pointsTemplateCanvas.addEventListener("mousemove",a=>dragPoint(a,pointsTemplateCanvas,pointsTemplate,ctxPointsTemplate)),pointsImageCanvas.addEventListener("mouseup",releasePoint),pointsTemplateCanvas.addEventListener("mouseup",releasePoint)}function handleClick(a,b,c,d){var e=b.getBoundingClientRect(),f={x:a.clientX-e.left,y:a.clientY-e.top};let g=clickedPoint(f,c);return null==g?void(c.push(f),drawPointWithIndex(d,f,c.length-1)):void(dragIndex=g)}function clickedPoint(a,b){var c=Math.pow;let d=null;for(let e=0;e<b.length;e++){let f=b[e],g=Math.sqrt(c(f.x-a.x,2)+c(f.y-a.y,2));if(g<=pointRadius){d=e;break}}return d}function dragPoint(a,b,c,d){if(null!==dragIndex){var e=b.getBoundingClientRect(),f=a.clientX-e.left,g=a.clientY-e.top;c[dragIndex].x=f,c[dragIndex].y=g,d.clearRect(0,0,b.width,b.height);for(var h=0;h<c.length;h++)drawPointWithIndex(d,c[h],h)}}function releasePoint(){dragIndex=null}function drawPointWithIndex(a,b,c){var d=colors[c%colors.length];a.fillStyle=d.hex,a.beginPath(),a.arc(b.x,b.y,pointRadius,0,2*Math.PI,!0),a.fill(),a.font="12px Arial",a.fillText(c,b.x+12,b.y+12)}function removeLastPoint(){pointsImage.length>pointsTemplate.length&&0<pointsImage.length?pointsImage.pop():pointsImage.length<pointsTemplate.length&&0<pointsTemplate.length?pointsTemplate.pop():pointsImage.length===pointsTemplate.length&&0<pointsImage.length&&(pointsImage.pop(),pointsTemplate.pop()),redrawPoints()}function redrawPoints(){ctxPointsImage.clearRect(0,0,pointsImageCanvas.width,pointsImageCanvas.height),pointsImage.forEach(function(a,b){drawPointWithIndex(ctxPointsImage,a,b)}),ctxPointsTemplate.clearRect(0,0,pointsTemplateCanvas.width,pointsTemplateCanvas.height),pointsTemplate.forEach(function(a,b){drawPointWithIndex(ctxPointsTemplate,a,b)})}function drawLine(a,b,c){a.beginPath(),a.moveTo(b.x,b.y),a.lineTo(c.x,c.y),a.stroke()}function addLine(a,b){lines.push({start:a,end:b})}function scalePoint(a,b,c){return{x:a.x*b,y:a.y*c}}function drawAllLines(a,b,c){lines.forEach(d=>{var e=scalePoint(d.start,b,c),f=scalePoint(d.end,b,c);drawLine(a,e,f)})}function printMatrix(a){console.log("Matrix:");let b=Array.from(a.data);for(let c,d=0;d<a.rows;d++){c=[];for(let e=0;e<a.cols;e++)c.push(b[d*a.cols+e]);console.log(c.join(" "))}}function computeHomography(){var a=Math.round;if(pointsImage.length!==pointsTemplate.length||4>pointsImage.length)return void alert("Both lists of points must have the same size and contain at least 4 points");let b=cv.matFromArray(2*pointsImage.length,1,cv.CV_32FC2,pointsImage.flatMap(b=>[a(b.x),a(b.y)])),c=cv.matFromArray(2*pointsTemplate.length,1,cv.CV_32FC2,pointsTemplate.flatMap(b=>[a(b.x),a(b.y)])),d=cv.findHomography(c,b);if(d.empty())return void alert("Could not found any homography for these sets of points. Be sure they are not colinear.");let e=new cv.Mat;cv.warpPerspective(templateImage,e,d,sourceImage.size());let f=new cv.Mat;return cv.addWeighted(sourceImage,1,e,.5,0,f),cv.imshow("imageCanvas",f),b.delete(),c.delete(),e.delete(),d}function drawTextInBox(a,b,c,d,e,f,g=!0){let h=10;for(a.font=`${h}px sans-serif`;a.measureText(b).width<e&&a.measureText("M").width<f;)h++,a.font=`${h}px sans-serif`;for(;a.measureText(b).width>e||a.measureText("M").width>f;)h--,a.font=`${h}px sans-serif`;g&&(a.save(),a.scale(-1,-1),c=-c-e,d=-d-f),a.fillText(b,c,d+h),g&&a.restore()}function drawPitchNumbers(a){a.fillStyle="red";const b=numWidth*scaleFactorWidth,c=numHeight*scaleFactorHeight,d=["10","20","30","40","50","40","30","20","10"];for(let e,f=0;2>f;f++){e=1,yPos=0==f?pitchHeight/4*scaleFactorHeight-numHeight*scaleFactorHeight:40*scaleFactorHeight-numHeight*scaleFactorHeight;for(let g of d){yardLine=10*scaleFactorWidth+10*e*scaleFactorWidth,0==f&&(g=g.split("").reverse().join(""));for(let d=0;d<g.length;d++)xPos=0==d?yardLine-(b+numDistanceYardLine*scaleFactorWidth):yardLine+numDistanceYardLine*scaleFactorWidth,drawTextInBox(a,g[d],xPos,yPos,b,c,1!=f);e+=1}}}function drawTemplate(){ctxTemplate.strokeStyle="red",ctxTemplate.fillStyle="black",ctxTemplate.fillRect(0,0,templateCanvas.width,templateCanvas.height),ctxTemplate.lineWidth=lineWidth,ctxTemplate.translate(lineWidth,lineWidth),addLine({x:0,y:0},{x:0,y:pitchHeight}),addLine({x:pitchWidth,y:0},{x:pitchWidth,y:pitchHeight}),addLine({x:0,y:0},{x:pitchWidth,y:0}),addLine({x:0,y:pitchHeight},{x:pitchWidth,y:pitchHeight});for(let a=10;a<pitchWidth-5;a+=5)addLine({x:a,y:0},{x:a,y:pitchHeight});pitchCenterY=pitchHeight/2;for(let a=10;a<pitchWidth-10;a+=1)0!=a%5&&(addLine({x:a,y:0},{x:a,y:hashMarkLength}),addLine({x:a,y:pitchCenterY-hashMarkMidHeight/2-hashMarkLength/2},{x:a,y:pitchCenterY-hashMarkMidHeight/2+hashMarkLength/2}),addLine({x:a,y:pitchCenterY+hashMarkMidHeight/2-hashMarkLength/2},{x:a,y:pitchCenterY+hashMarkMidHeight/2+hashMarkLength/2}),addLine({x:a,y:pitchHeight},{x:a,y:pitchHeight-hashMarkLength}));drawAllLines(ctxTemplate,scaleFactorWidth,scaleFactorHeight),drawPitchNumbers(ctxTemplate),templateContainer.style.height=templateCanvas.height+"px"}